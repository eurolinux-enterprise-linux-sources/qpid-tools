From 5dbdfc727f9e997f8c1ca9f01d5d05075fc5ce93 Mon Sep 17 00:00:00 2001
From: Nuno Santos <nsantos@apache.org>
Date: Tue, 29 Nov 2011 21:41:03 +0000
Subject: [PATCH 1/5] Bug 758853, QPID-3533: qpid-config does not properly set some options if value evaluates to False -- applied patch from bpdeman

git-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1208094 13f79535-47bb-0310-9956-ffa450edef68
---
 qpid/tools/src/py/qpid-config |   30 +++++++++++++++---------------
 1 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/qpid/tools/src/py/qpid-config b/qpid/tools/src/py/qpid-config
index bb49b9d..45cf01e 100755
--- a/qpid/tools/src/py/qpid-config
+++ b/qpid/tools/src/py/qpid-config
@@ -228,7 +228,7 @@ def OptionsAndArguments(argv):
         config._recursive = True
     if opts.broker_addr:
         config._host = opts.broker_addr
-    if opts.timeout:
+    if opts.timeout is not None:
         config._connTimeout = opts.timeout
         if config._connTimeout == 0:
             config._connTimeout = None
@@ -244,13 +244,13 @@ def OptionsAndArguments(argv):
         config._clusterDurable = True
     if opts.file:
         config._file = opts.file
-    if opts.file_count:
+    if opts.file_count is not None:
         config._fileCount = opts.file_count
-    if opts.file_size:
+    if opts.file_size is not None:
         config._fileSize = opts.file_size
-    if opts.max_queue_size != None:
+    if opts.max_queue_size is not None:
         config._maxQueueSize = opts.max_queue_size
-    if opts.max_queue_count:
+    if opts.max_queue_count is not None:
         config._maxQueueCount = opts.max_queue_count
     if opts.limit_policy:
            config._limitPolicy = opts.limit_policy
@@ -271,13 +271,13 @@ def OptionsAndArguments(argv):
         config._if_unused = False
     if opts.sasl_mechanism:
         config._sasl_mechanism = opts.sasl_mechanism
-    if opts.flow_stop_size:
+    if opts.flow_stop_size is not None:
         config._flowStopSize = opts.flow_stop_size
-    if opts.flow_resume_size:
+    if opts.flow_resume_size is not None:
         config._flowResumeSize = opts.flow_resume_size
-    if opts.flow_stop_count:
+    if opts.flow_stop_count is not None:
         config._flowStopCount = opts.flow_stop_count
-    if opts.flow_resume_count:
+    if opts.flow_resume_count is not None:
         config._flowResumeCount = opts.flow_resume_count
     if opts.group_header:
         config._msgGroupHeader = opts.group_header
@@ -522,9 +522,9 @@ class BrokerManager:
             declArgs[FILECOUNT] = config._fileCount
             declArgs[FILESIZE]  = config._fileSize
 
-        if config._maxQueueSize != None:
+        if config._maxQueueSize is not None:
             declArgs[MAX_QUEUE_SIZE]  = config._maxQueueSize
-        if config._maxQueueCount:
+        if config._maxQueueCount is not None:
             declArgs[MAX_QUEUE_COUNT]  = config._maxQueueCount
         if config._limitPolicy:
             if config._limitPolicy == "none":
@@ -550,13 +550,13 @@ class BrokerManager:
         if config._eventGeneration:
             declArgs[QUEUE_EVENT_GENERATION]  = config._eventGeneration
 
-        if config._flowStopSize:
+        if config._flowStopSize is not None:
             declArgs[FLOW_STOP_SIZE]  = config._flowStopSize
-        if config._flowResumeSize:
+        if config._flowResumeSize is not None:
             declArgs[FLOW_RESUME_SIZE]  = config._flowResumeSize
-        if config._flowStopCount:
+        if config._flowStopCount is not None:
             declArgs[FLOW_STOP_COUNT]  = config._flowStopCount
-        if config._flowResumeCount:
+        if config._flowResumeCount is not None:
             declArgs[FLOW_RESUME_COUNT]  = config._flowResumeCount
 
         if config._msgGroupHeader:
-- 
1.7.1

From 65144d9e0501807bb80015df273a68dd759e88c9 Mon Sep 17 00:00:00 2001
From: Ted Ross <tross@apache.org>
Date: Thu, 5 Apr 2012 18:33:26 +0000
Subject: [PATCH 2/5] Bug 806888, QPID-3938: Updated to track an API change in the wrapped Python client API.

git-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1309998 13f79535-47bb-0310-9956-ffa450edef68
---
 qpid/tools/src/py/qmf-tool |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/qpid/tools/src/py/qmf-tool b/qpid/tools/src/py/qmf-tool
index 8413ca2..db51c96 100755
--- a/qpid/tools/src/py/qmf-tool
+++ b/qpid/tools/src/py/qmf-tool
@@ -266,7 +266,7 @@ class QmfData:
     self.conn_options = conn_options
     self.qmf_options = qmf_options
     self.agent_filter = '[]'
-    self.connection = cqpid.Connection(self.url, self.conn_options)
+    self.connection = cqpid.Connection(self.url, **self.conn_options)
     self.connection.open()
     self.session = qmf2.ConsoleSession(self.connection, self.qmf_options)
     self.session.setAgentFilter(self.agent_filter)
-- 
1.7.1

From b051df3d478dc57cfa1762b29f5eb6be4961b9ba Mon Sep 17 00:00:00 2001
From: Ted Ross <tross@apache.org>
Date: Wed, 15 Feb 2012 21:58:46 +0000
Subject: [PATCH 3/5] Bug 707682 - Can't call reloadACLFile via qpid-tool
 QPID-3847 - Fixed recursive ID generation when V1 and V2 are mixed.
 Thanks to Siddhesh Poyarekar for his help with this issue.

git-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1244750 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 37d762898624deb99809d609084dc0bbd20dce3a)
---
 qpid/tools/src/py/qpid-tool |   20 ++++++++++++++++----
 1 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/qpid/tools/src/py/qpid-tool b/qpid/tools/src/py/qpid-tool
index df8b7e3..af948b1 100755
--- a/qpid/tools/src/py/qpid-tool
+++ b/qpid/tools/src/py/qpid-tool
@@ -252,6 +252,20 @@ class QmfData(Console):
     elif tokens[0].isdigit():
       self.showObjectById(int(tokens[0]))
 
+  def _build_object_name(self, obj):
+    values = []
+    for p,v in obj.getProperties():
+      if p.name != "vhostRef" and p.index == 1:
+        if p.name == "brokerRef": # reference to broker
+          values.append('org.apache.qpid.broker:broker:amqp-broker')
+        else:
+          values.append(str(v))
+
+    object_key = ",".join(values)
+    class_key = obj.getClassKey();
+    return class_key.getPackageName() + ":" + class_key.getClassName() + ":" + object_key
+    
+
   def do_call(self, data):
     tokens = data.split()
     if len(tokens) < 2:
@@ -290,10 +304,8 @@ class QmfData(Console):
 
     object_id = obj.getObjectId();
     if not object_id.isV2 and obj.getAgent().isV2:
-        object_key = ",".join([str(v) for p, v in obj.getProperties() if p.name != "vhostRef" and p.index == 1])
-        class_key = obj.getClassKey();
-        object_name = class_key.getPackageName() + ":" + class_key.getClassName() + ":" + object_key
-        object_id = ObjectId.create(object_id.agentName, object_name)
+      object_name = self._build_object_name(obj)
+      object_id = ObjectId.create(object_id.agentName, object_name)
 
     self.session._sendMethodRequest(self.broker, obj.getClassKey(), object_id, methodName, args)
 
-- 
1.7.1

From 1dcbcc4e2ea7e71138f2a8e5a9c714b2c9c14650 Mon Sep 17 00:00:00 2001
From: Ted Ross <tross@redhat.com>
Date: Fri, 27 Jul 2012 11:46:57 -0400
Subject: [PATCH 4/5] Bug 825078 - qpid-tools no longer works with SSL

---
 qpid/tools/src/py/qpid-cluster     |   27 ++++++++++++++++++---------
 qpid/tools/src/py/qpid-config      |   15 +++++++++++----
 qpid/tools/src/py/qpid-printevents |   20 +++++++++++++++++---
 qpid/tools/src/py/qpid-queue-stats |   14 ++++++++++----
 qpid/tools/src/py/qpid-route       |   27 +++++++++++++++------------
 qpid/tools/src/py/qpid-stat        |   24 ++++++++++++++++--------
 qpid/tools/src/py/qpid-tool        |   12 ++++++++----
 7 files changed, 95 insertions(+), 44 deletions(-)

diff --git a/qpid/tools/src/py/qpid-cluster b/qpid/tools/src/py/qpid-cluster
index d4f9391..7d800b5 100755
--- a/qpid/tools/src/py/qpid-cluster
+++ b/qpid/tools/src/py/qpid-cluster
@@ -64,17 +64,19 @@ class IpAddr:
         return bestAddr
 
 class BrokerManager:
-    def __init__(self, config):
-        self.config = config
-        self.brokerName = None
-        self.qmf        = None
-        self.broker     = None
-        self.brokers    = []
+    def __init__(self, config, conn_options):
+        self.config       = config
+        self.cert         = None
+        self.conn_options = conn_options
+        self.brokerName   = None
+        self.qmf          = None
+        self.broker       = None
+        self.brokers      = []
 
     def SetBroker(self, brokerUrl):
         self.url = brokerUrl
         self.qmf = Session()
-        self.broker = self.qmf.addBroker(brokerUrl, self.config._connTimeout)
+        self.broker = self.qmf.addBroker(brokerUrl, self.config._connTimeout, **self.conn_options)
         agents = self.qmf.getAgents()
         for a in agents:
             if a.getAgentBank() == '0':
@@ -240,6 +242,8 @@ def main(argv=None):
                       description="Example: $ qpid-cluster -C  broker-host:10000")
 
         parser.add_option("-t", "--timeout", action="store", type="int", default=10, metavar="SECS", help="Maximum time to wait for broker connection (in seconds)")
+        parser.add_option("--sasl-mechanism", action="store", type="string", metavar="<mech>", help="SASL mechanism for authentication (e.g. EXTERNAL, ANONYMOUS, PLAIN, CRAM-MD, DIGEST-MD5, GSSAPI). SASL automatically picks the most secure available mechanism - use this option to override.")
+        parser.add_option("--ssl-certificate", action="store", type="string", metavar="<cert>", help="Client SSL certificate (PEM Format)")
         parser.add_option("-C", "--all-connections", action="store_true", default=False, help="View client connections to all cluster members")
         parser.add_option("-c", "--connections",  metavar="ID", help="View client connections to specified member")
         parser.add_option("-d", "--del-connection",  metavar="HOST:PORT", help="Disconnect a client connection")
@@ -280,7 +284,13 @@ def main(argv=None):
         config._force = opts.force
         config._numeric = opts.numeric
 
-        bm    = BrokerManager(config)
+        conn_options = {}
+        if opts.sasl_mechanism:
+            conn_options['mechanisms'] = opts.sasl_mechanism
+        if opts.ssl_certificate:
+            conn_options['ssl_certfile'] = opts.ssl_certificate
+
+        bm = BrokerManager(config, conn_options)
 
         try:
             bm.SetBroker(config._host)
@@ -303,7 +313,6 @@ def main(argv=None):
 
         bm.Disconnect()
     except Exception, e:
-        raise
         print str(e)
         return 1
 
diff --git a/qpid/tools/src/py/qpid-config b/qpid/tools/src/py/qpid-config
index 45cf01e..fd752c2 100755
--- a/qpid/tools/src/py/qpid-config
+++ b/qpid/tools/src/py/qpid-config
@@ -92,7 +92,6 @@ class Config:
         self._ive               = False
         self._eventGeneration   = None
         self._file              = None
-        self._sasl_mechanism    = None
         self._flowStopCount     = None
         self._flowResumeCount   = None
         self._flowStopSize      = None
@@ -103,6 +102,7 @@ class Config:
         self._returnCode        = 0
 
 config = Config()
+conn_options = {}
 
 FILECOUNT = "qpid.file_count"
 FILESIZE  = "qpid.file_size"
@@ -163,6 +163,7 @@ def OptionsAndArguments(argv):
     group1.add_option("-b", "--bindings", action="store_true", help="Show bindings in queue or exchange list")
     group1.add_option("-a", "--broker-addr", action="store", type="string", default="localhost:5672", metavar="<address>", help="Address of qpidd broker with syntax: [username/password@] hostname | ip-address [:<port>]")
     group1.add_option("--sasl-mechanism", action="store", type="string", metavar="<mech>", help="SASL mechanism for authentication (e.g. EXTERNAL, ANONYMOUS, PLAIN, CRAM-MD, DIGEST-MD5, GSSAPI). SASL automatically picks the most secure available mechanism - use this option to override.")
+    group1.add_option("--ssl-certificate", action="store", type="string", metavar="<cert>", help="Client SSL certificate (PEM Format)")
     parser.add_option_group(group1)
 
     group_ls = OptionGroup(parser, "Options for Listing Exchanges and Queues")
@@ -285,6 +286,12 @@ def OptionsAndArguments(argv):
         config._sharedMsgGroup = True
     if opts.extra_arguments:
         config._extra_arguments = opts.extra_arguments
+
+    if opts.sasl_mechanism:
+        conn_options['mechanisms'] = opts.sasl_mechanism
+    if opts.ssl_certificate:
+        conn_options['ssl_certfile'] = opts.ssl_certificate
+
     return args
 
 
@@ -335,10 +342,10 @@ class BrokerManager:
         self.broker     = None
         self.mechanism  = None
 
-    def SetBroker(self, brokerUrl, mechanism):
+    def SetBroker(self, brokerUrl):
         self.url = brokerUrl
         self.qmf = Session()
-        self.broker = self.qmf.addBroker(brokerUrl, config._connTimeout, mechanism)
+        self.broker = self.qmf.addBroker(brokerUrl, config._connTimeout, **conn_options)
         agents = self.qmf.getAgents()
         for a in agents:
             if a.getAgentBank() == '0':
@@ -649,7 +656,7 @@ def main(argv=None):
     bm   = BrokerManager()
 
     try:
-        bm.SetBroker(config._host, config._sasl_mechanism)
+        bm.SetBroker(config._host)
         if len(args) == 0:
             bm.Overview()
         else:
diff --git a/qpid/tools/src/py/qpid-printevents b/qpid/tools/src/py/qpid-printevents
index d56d289..cbb9d66 100755
--- a/qpid/tools/src/py/qpid-printevents
+++ b/qpid/tools/src/py/qpid-printevents
@@ -82,21 +82,35 @@ def main(argv=None):
   p = optparse.OptionParser(usage=_usage, description=_description, formatter=JHelpFormatter())
   p.add_option("--heartbeats", action="store_true", default=False, help="Use heartbeats.")
   p.add_option("--sasl-mechanism", action="store", type="string", metavar="<mech>", help="SASL mechanism for authentication (e.g. EXTERNAL, ANONYMOUS, PLAIN, CRAM-MD, DIGEST-MD5, GSSAPI). SASL automatically picks the most secure available mechanism - use this option to override.")
+  p.add_option("--ssl-certificate", action="store", type="string", metavar="<cert>", help="Client SSL certificate (PEM Format)")
 
   options, arguments = p.parse_args(args=argv)
   if len(arguments) == 0:
     arguments.append("localhost")
 
+  conn_options = {}
+  props = {}
+
+  if options.sasl_mechanism:
+    conn_options['mechanisms'] = options.sasl_mechanism
+  if options.ssl_certificate:
+    conn_options['ssl_certfile'] = options.ssl_certificate
+  if options.heartbeats:
+    props['heartbeat'] = 5
+
+  if len(props) > 0:
+    conn_options['client_properties'] = props
+
   console = EventConsole()
   session = Session(console, rcvObjects=False, rcvHeartbeats=options.heartbeats, manageConnections=True)
   brokers = []
   try:
     try:
       for host in arguments:
-        brokers.append(session.addBroker(host, None, options.sasl_mechanism))
+        brokers.append(session.addBroker(host, None, **conn_options))
 
-        while (True):
-          sleep(10)
+      while (True):
+        sleep(10)
 
     except KeyboardInterrupt:
         print
diff --git a/qpid/tools/src/py/qpid-queue-stats b/qpid/tools/src/py/qpid-queue-stats
index 562ccce..f68609a 100755
--- a/qpid/tools/src/py/qpid-queue-stats
+++ b/qpid/tools/src/py/qpid-queue-stats
@@ -32,13 +32,13 @@ from qpid.connection import Connection, ConnectionFailed
 from time            import sleep
 
 class BrokerManager(Console):
-  def __init__(self, host, mechanism):
+  def __init__(self, host, conn_options):
     self.url = host
     self.objects = {}
     self.filter  = None
     self.session = Session(self, rcvEvents=False, rcvHeartbeats=False,
                            userBindings=True, manageConnections=True)
-    self.broker  = self.session.addBroker(self.url, None, mechanism)
+    self.broker  = self.session.addBroker(self.url, **conn_options)
     self.firstError = True
 
   def setFilter(self,filter):
@@ -126,17 +126,23 @@ def main(argv=None):
   p.add_option('--broker-address','-a', default='localhost' , help='broker-addr is in the form:  [username/password@] hostname | ip-address [:<port>] \n ex:  localhost, 10.1.1.7:10000, broker-host:10000, guest/guest@localhost')
   p.add_option('--filter','-f' ,default=None ,help='a list of comma separated queue names (regex are accepted) to show')
   p.add_option("--sasl-mechanism", action="store", type="string", metavar="<mech>", help="SASL mechanism for authentication (e.g. EXTERNAL, ANONYMOUS, PLAIN, CRAM-MD, DIGEST-MD5, GSSAPI). SASL automatically picks the most secure available mechanism - use this option to override.")
- 
+  p.add_option("--ssl-certificate", action="store", type="string", metavar="<cert>", help="Client SSL certificate (PEM Format)")
 
   options, arguments = p.parse_args(args=argv)
 
+  conn_options = {}
+  if options.sasl_mechanism:
+    conn_options['mechanisms'] = options.sasl_mechanism
+  if options.ssl_certificate:
+    conn_options['ssl_certfile'] = options.ssl_certificate
+
   host = options.broker_address
   filter = []
   if options.filter != None:
     for s in options.filter.split(","):
         filter.append(re.compile(s))
 
-  bm = BrokerManager(host, options.sasl_mechanism)
+  bm = BrokerManager(host, conn_options)
   bm.setFilter(filter)
   bm.Display()
  
diff --git a/qpid/tools/src/py/qpid-route b/qpid/tools/src/py/qpid-route
index f90416d..ffab2d6 100755
--- a/qpid/tools/src/py/qpid-route
+++ b/qpid/tools/src/py/qpid-route
@@ -53,15 +53,15 @@ def Usage():
 
 class Config:
     def __init__(self):
-        self._verbose   = False
-        self._quiet     = False
-        self._durable   = False
-        self._dellink   = False
-        self._srclocal  = False
-        self._transport = "tcp"
-        self._ack       = 0
-        self._connTimeout = 10
-        self._client_sasl_mechanism = None
+        self._verbose      = False
+        self._quiet        = False
+        self._durable      = False
+        self._dellink      = False
+        self._srclocal     = False
+        self._transport    = "tcp"
+        self._ack          = 0
+        self._connTimeout  = 10
+        self._conn_options = {}
 
 config = Config()
 
@@ -96,7 +96,7 @@ def OptionsAndArguments(argv):
     parser.add_option("-t", "--transport", action="store", type="string", default="tcp", metavar="<transport>", help="Transport to use for links, defaults to tcp")
 
     parser.add_option("--client-sasl-mechanism", action="store", type="string", metavar="<mech>", help="SASL mechanism for authentication (e.g. EXTERNAL, ANONYMOUS, PLAIN, CRAM-MD, DIGEST-MD5, GSSAPI). Used when the client connects to the destination broker (not for authentication between the source and destination brokers - that is specified using the [mechanisms] argument to 'add route'). SASL automatically picks the most secure available mechanism - use this option to override.")
-
+    parser.add_option("--ssl-certificate", action="store", type="string", metavar="<cert>", help="Client SSL certificate (PEM Format)")
     opts, encArgs = parser.parse_args(args=argv)
 
     try:
@@ -132,7 +132,10 @@ def OptionsAndArguments(argv):
         config._ack = opts.ack
 
     if opts.client_sasl_mechanism:
-        config._client_sasl_mechanism = opts.client_sasl_mechanism
+        config._conn_options['mechanisms'] = opts.client_sasl_mechanism
+
+    if opts.ssl_certificate:
+        config._conn_options['ssl_certfile'] = opts.ssl_certificate
 
     return args
 
@@ -143,7 +146,7 @@ class RouteManager:
         self.local = BrokerURL(localBroker)
         self.remote  = None
         self.qmf = Session()
-        self.broker = self.qmf.addBroker(localBroker, config._connTimeout, config._client_sasl_mechanism)
+        self.broker = self.qmf.addBroker(localBroker, config._connTimeout, **config._conn_options)
         self.broker._waitForStable()
         self.agent = self.broker.getBrokerAgent()
 
diff --git a/qpid/tools/src/py/qpid-stat b/qpid/tools/src/py/qpid-stat
index ce3f5d1..c4aaf56 100755
--- a/qpid/tools/src/py/qpid-stat
+++ b/qpid/tools/src/py/qpid-stat
@@ -38,21 +38,25 @@ class Config:
         self._increasing = False
         self._sortcol = None
         self._cluster_detail = False
-        self._sasl_mechanism = None
 
 config = Config()
+conn_options = {}
 
 def OptionsAndArguments(argv):
     """ Set global variables for options, return arguments """
 
     global config
+    global conn_options
 
     parser = OptionParser(usage="usage: %prog [options] BROKER",
                       description="Example: $ qpid-stat -q  broker-host:10000")
 
     group1 = OptionGroup(parser, "General Options")
-    group1.add_option("-t", "--timeout", action="store", type="int", default=10, metavar="<secs>", help="Maximum time to wait for broker connection (in seconds)")
-    group1.add_option("--sasl-mechanism", action="store", type="string", metavar="<mech>", help="SASL mechanism for authentication (e.g. EXTERNAL, ANONYMOUS, PLAIN, CRAM-MD, DIGEST-MD5, GSSAPI). SASL automatically picks the most secure available mechanism - use this option to override.")
+    group1.add_option("-t", "--timeout", action="store", type="int", default=10, metavar="<secs>",
+                      help="Maximum time to wait for broker connection (in seconds)")
+    group1.add_option("--sasl-mechanism", action="store", type="string", metavar="<mech>",
+                      help="SASL mechanism for authentication (e.g. EXTERNAL, ANONYMOUS, PLAIN, CRAM-MD, DIGEST-MD5, GSSAPI). SASL automatically picks the most secure available mechanism - use this option to override.")
+    group1.add_option("--ssl-certificate", action="store", type="string", metavar="<cert>", help="Client SSL certificate (PEM Format)")
     parser.add_option_group(group1)
 
     group2 = OptionGroup(parser, "Display Options")
@@ -87,11 +91,15 @@ def OptionsAndArguments(argv):
     config._increasing = opts.increasing
     config._limit = opts.limit
     config._cluster_detail = opts.cluster
-    config._sasl_mechanism = opts.sasl_mechanism
 
     if args:
         config._host = args[0]
 
+    if opts.sasl_mechanism:
+        conn_options['mechanisms'] = opts.sasl_mechanism
+    if opts.ssl_certificate:
+        conn_options['ssl_certfile'] = opts.ssl_certificate
+
     return args
 
 class IpAddr:
@@ -180,11 +188,10 @@ class BrokerManager(Console):
         self.brokers    = []
         self.cluster    = None
 
-    def SetBroker(self, brokerUrl, mechanism):
+    def SetBroker(self, brokerUrl):
         self.url = brokerUrl
         self.qmf = Session()
-        self.mechanism = mechanism
-        self.broker = self.qmf.addBroker(brokerUrl, config._connTimeout, mechanism)
+        self.broker = self.qmf.addBroker(brokerUrl, config._connTimeout, **conn_options)
         agents = self.qmf.getAgents()
         for a in agents:
             if a.getAgentBank() == '0':
@@ -297,6 +304,7 @@ class BrokerManager(Console):
         heads.append(Header('client-addr'))
         heads.append(Header('cproc'))
         heads.append(Header('cpid'))
+        heads.append(Header('mech'))
         heads.append(Header('auth'))
         heads.append(Header('connected', Header.DURATION))
         heads.append(Header('idle', Header.DURATION))
@@ -505,7 +513,7 @@ def main(argv=None):
     bm   = BrokerManager()
 
     try:
-        bm.SetBroker(config._host, config._sasl_mechanism)
+        bm.SetBroker(config._host)
         bm.display()
         bm.Disconnect()
         return 0
diff --git a/qpid/tools/src/py/qpid-tool b/qpid/tools/src/py/qpid-tool
index af948b1..43fdd3c 100755
--- a/qpid/tools/src/py/qpid-tool
+++ b/qpid/tools/src/py/qpid-tool
@@ -173,11 +173,11 @@ class Mcli(Cmd):
 class QmfData(Console):
   """
   """
-  def __init__(self, disp, url):
+  def __init__(self, disp, url, cert):
     self.disp = disp
     self.url = url
     self.session = Session(self, manageConnections=True)
-    self.broker = self.session.addBroker(self.url)
+    self.broker = self.session.addBroker(self.url, ssl_certfile=cert)
     self.lock = Lock()
     self.connected = None
     self.closing = None
@@ -455,6 +455,7 @@ class QmfData(Console):
           rows.append(row)
       else:
         print "No object found with ID %d" % dispId
+        return
     finally:
       self.lock.release()
     self.disp.table(caption, heads, rows)
@@ -702,7 +703,7 @@ class IdRegistry(object):
 
 
 def Usage():
-  print "Usage:  qpid-tool [[<username>/<password>@]<target-host>[:<tcp-port>]]"
+  print "Usage:  qpid-tool amqp[s]://[[<username>/<password>@]<target-host>[:<tcp-port>]] [certificate-file]"
   print
 
 #=========================================================
@@ -723,10 +724,13 @@ if _host[0] == '-':
   sys.exit(1)
 
 disp = Display()
+cert = None
+if len(cargs) > 1:
+  cert = cargs[1]
 
 # Attempt to make a connection to the target broker
 try:
-  data = QmfData(disp, _host)
+  data = QmfData(disp, _host, cert)
 except Exception, e:
   if str(e).find("Exchange not found") != -1:
     print "Management not enabled on broker:  Use '-m yes' option on broker startup."
-- 
1.7.1

From a08543c7c465ad95c697ab4ae9ea3fd2328e5f1c Mon Sep 17 00:00:00 2001
From: Ted Ross <tross@redhat.com>
Date: Fri, 24 Aug 2012 13:00:54 -0400
Subject: [PATCH 5/5] Bug 850111 - qpid-stat -c mech column data missing

---
 qpid/tools/src/py/qpid-stat |    1 -
 1 files changed, 0 insertions(+), 1 deletions(-)

diff --git a/qpid/tools/src/py/qpid-stat b/qpid/tools/src/py/qpid-stat
index c4aaf56..f8c5d6c 100755
--- a/qpid/tools/src/py/qpid-stat
+++ b/qpid/tools/src/py/qpid-stat
@@ -304,7 +304,6 @@ class BrokerManager(Console):
         heads.append(Header('client-addr'))
         heads.append(Header('cproc'))
         heads.append(Header('cpid'))
-        heads.append(Header('mech'))
         heads.append(Header('auth'))
         heads.append(Header('connected', Header.DURATION))
         heads.append(Header('idle', Header.DURATION))
-- 
1.7.1

